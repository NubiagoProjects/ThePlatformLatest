import { createClient, SupabaseClient } from '@supabase/supabase-js';

// Supabase configuration
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://gwcngnbugrfavejmvcnq.supabase.co';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd3Y25nbmJ1Z3JmYXZlam12Y25xIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI2NjUzMTQsImV4cCI6MjA2ODI0MTMxNH0.OHozj3ERsXyih5QYM1rc7hfqFZWvfhofx8uR344WcXU';

// Create Supabase client
export const supabase: SupabaseClient = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
});

// Storage bucket configuration
export const STORAGE_BUCKETS = {
  PRODUCT_IMAGES: 'product-images',
  USER_AVATARS: 'user-avatars',
  ORDER_DOCUMENTS: 'order-documents'
} as const;

// Helper function to get public URL for a file
export const getPublicUrl = (bucket: string, path: string): string => {
  const { data } = supabase.storage.from(bucket).getPublicUrl(path);
  return data.publicUrl;
};

// Helper function to upload file
export const uploadFile = async (
  bucket: string,
  path: string,
  file: File,
  options?: {
    cacheControl?: string;
    contentType?: string;
    upsert?: boolean;
  }
) => {
  try {
    const { data, error } = await supabase.storage
      .from(bucket)
      .upload(path, file, {
        cacheControl: options?.cacheControl || '3600',
        upsert: options?.upsert || false,
        contentType: options?.contentType || file.type
      });

    if (error) {
      throw error;
    }

    return {
      success: true,
      data,
      publicUrl: getPublicUrl(bucket, data.path)
    };
  } catch (error) {
    console.error('Upload error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Upload failed'
    };
  }
};

// Helper function to delete file
export const deleteFile = async (bucket: string, path: string) => {
  try {
    const { error } = await supabase.storage
      .from(bucket)
      .remove([path]);

    if (error) {
      throw error;
    }

    return { success: true };
  } catch (error) {
    console.error('Delete error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Delete failed'
    };
  }
};

// Database types (auto-generated by Supabase CLI)
export type Database = {
  public: {
    Tables: {
      users: {
        Row: {
          id: string;
          name: string;
          email: string;
          role: 'USER' | 'SUPPLIER' | 'ADMIN';
          phone: string | null;
          avatar: string | null;
          is_active: boolean;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id: string;
          name: string;
          email: string;
          role?: 'USER' | 'SUPPLIER' | 'ADMIN';
          phone?: string | null;
          avatar?: string | null;
          is_active?: boolean;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          name?: string;
          email?: string;
          role?: 'USER' | 'SUPPLIER' | 'ADMIN';
          phone?: string | null;
          avatar?: string | null;
          is_active?: boolean;
          created_at?: string;
          updated_at?: string;
        };
      };
      products: {
        Row: {
          id: string;
          name: string;
          slug: string;
          description: string;
          price: number;
          compare_price: number | null;
          cost: number | null;
          track_quantity: boolean;
          quantity: number;
          sku: string | null;
          barcode: string | null;
          weight: number | null;
          images: string[];
          is_active: boolean;
          is_featured: boolean;
          tags: string[];
          category_id: string;
          supplier_id: string;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          name: string;
          slug: string;
          description: string;
          price: number;
          compare_price?: number | null;
          cost?: number | null;
          track_quantity?: boolean;
          quantity?: number;
          sku?: string | null;
          barcode?: string | null;
          weight?: number | null;
          images?: string[];
          is_active?: boolean;
          is_featured?: boolean;
          tags?: string[];
          category_id: string;
          supplier_id: string;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          name?: string;
          slug?: string;
          description?: string;
          price?: number;
          compare_price?: number | null;
          cost?: number | null;
          track_quantity?: boolean;
          quantity?: number;
          sku?: string | null;
          barcode?: string | null;
          weight?: number | null;
          images?: string[];
          is_active?: boolean;
          is_featured?: boolean;
          tags?: string[];
          category_id?: string;
          supplier_id?: string;
          created_at?: string;
          updated_at?: string;
        };
      };
      orders: {
        Row: {
          id: string;
          order_number: string;
          user_id: string;
          status: 'PENDING' | 'CONFIRMED' | 'PROCESSING' | 'SHIPPED' | 'DELIVERED' | 'CANCELLED' | 'REFUNDED';
          payment_status: 'PENDING' | 'COMPLETED' | 'FAILED' | 'REFUNDED';
          subtotal: number;
          tax_amount: number;
          shipping_amount: number;
          discount_amount: number;
          total_amount: number;
          currency: string;
          payment_method: string | null;
          payment_id: string | null;
          shipping_address_id: string | null;
          billing_address_id: string | null;
          notes: string | null;
          tracking_number: string | null;
          shipped_at: string | null;
          delivered_at: string | null;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          order_number: string;
          user_id: string;
          status?: 'PENDING' | 'CONFIRMED' | 'PROCESSING' | 'SHIPPED' | 'DELIVERED' | 'CANCELLED' | 'REFUNDED';
          payment_status?: 'PENDING' | 'COMPLETED' | 'FAILED' | 'REFUNDED';
          subtotal: number;
          tax_amount?: number;
          shipping_amount?: number;
          discount_amount?: number;
          total_amount: number;
          currency?: string;
          payment_method?: string | null;
          payment_id?: string | null;
          shipping_address_id?: string | null;
          billing_address_id?: string | null;
          notes?: string | null;
          tracking_number?: string | null;
          shipped_at?: string | null;
          delivered_at?: string | null;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          order_number?: string;
          user_id?: string;
          status?: 'PENDING' | 'CONFIRMED' | 'PROCESSING' | 'SHIPPED' | 'DELIVERED' | 'CANCELLED' | 'REFUNDED';
          payment_status?: 'PENDING' | 'COMPLETED' | 'FAILED' | 'REFUNDED';
          subtotal?: number;
          tax_amount?: number;
          shipping_amount?: number;
          discount_amount?: number;
          total_amount?: number;
          currency?: string;
          payment_method?: string | null;
          payment_id?: string | null;
          shipping_address_id?: string | null;
          billing_address_id?: string | null;
          notes?: string | null;
          tracking_number?: string | null;
          shipped_at?: string | null;
          delivered_at?: string | null;
          created_at?: string;
          updated_at?: string;
        };
      };
      categories: {
        Row: {
          id: string;
          name: string;
          slug: string;
          description: string | null;
          image: string | null;
          is_active: boolean;
          parent_id: string | null;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          name: string;
          slug: string;
          description?: string | null;
          image?: string | null;
          is_active?: boolean;
          parent_id?: string | null;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          name?: string;
          slug?: string;
          description?: string | null;
          image?: string | null;
          is_active?: boolean;
          parent_id?: string | null;
          created_at?: string;
          updated_at?: string;
        };
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      user_role: 'USER' | 'SUPPLIER' | 'ADMIN';
      order_status: 'PENDING' | 'CONFIRMED' | 'PROCESSING' | 'SHIPPED' | 'DELIVERED' | 'CANCELLED' | 'REFUNDED';
      payment_status: 'PENDING' | 'COMPLETED' | 'FAILED' | 'REFUNDED';
    };
  };
};

// Typed Supabase client
export type TypedSupabaseClient = SupabaseClient<Database>;

export default supabase; 